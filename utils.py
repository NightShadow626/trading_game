# Importation des modules n√©cessaires
import random

#Fonctions utiles
class Entreprise:
    '''Classe repr√©sentant une entreprise avec un nom, une valeur et une variation de valeur.
    Elle contient √©galement un historique des valeurs pour les 100 derniers jours.'''
    def __init__(self, nom: str, valeur_initiale: float) -> None:
        '''Initialise l'entreprise avec un nom et une valeur initiale. L'historique est initialis√© avec la valeur initiale.'''
        self.nom = nom
        self.valeur = valeur_initiale
        self.variation = 0.0
        self.historique = {
            "debut": 0,
            "valeurs": [valeur_initiale]
        }

    def update(self, nouvelle_valeur: float, nouvelle_variation: float) -> None:
        '''Met √† jour la valeur et la variation de l'entreprise, et met √† jour l'historique des valeurs.'''
        self.valeur = nouvelle_valeur
        self.variation = nouvelle_variation
        self.mettre_a_jour_historique(nouvelle_valeur)

    def mettre_a_jour_historique(self, nouveau_prix: float) -> None:
        '''Met √† jour l'historique des valeurs avec la nouvelle valeur. Garde uniquement les 100 derniers jours.'''
        self.historique["valeurs"].append(nouveau_prix)

        # Garde uniquement les 100 derniers jours
        if len(self.historique["valeurs"]) > 100:
            surplus = len(self.historique["valeurs"]) - 100
            self.historique["valeurs"] = self.historique["valeurs"][surplus:]
            self.historique["debut"] += surplus

    def get_nom(self) -> str:
        '''Retourne le nom de l'entreprise.'''
        return self.nom
    
    def mod_nom(self, nom : str) -> None:
        '''Modifie le nom de l'entreprise.'''
        self.nom = nom

    def get_valeur(self) -> float:
        '''Retourne la valeur actuelle de l'entreprise.'''
        return self.valeur
    
    def mod_valeur(self, valeur : float) -> None:
        '''Modifie la valeur de l'entreprise.'''
        self.valeur = valeur

    def get_variation(self) -> float:
        '''Retourne la variation actuelle de l'entreprise.''' 
        return self.variation
    
    def mod_variation(self, variation : float) -> None:
        '''Modifie la variation de l'entreprise.'''
        self.variation = variation

    def get_historique(self) -> dict:
        '''Retourne l'historique des valeurs de l'entreprise.'''
        return self.historique
    
    def get_debut_historique(self) -> int:
        return self.historique["debut"]

    def get_all(self) -> dict:
        '''Retourne toutes les informations de l'entreprise sous forme de dictionnaire.'''
         # Retourne un dictionnaire avec toutes les informations de l'entreprise
         # y compris le nom, la valeur, la variation et l'historique
        return {
            "nom": self.nom,
            "valeur": self.valeur,
            "variation": self.variation,
            "historique": self.historique
        }



def generer_liste_entreprises(noms : list) -> list:
    '''G√©n√®re une liste d'entreprises avec des valeurs initiales al√©atoires entre 1 et 100.'''
    import random
    return [Entreprise(nom, random.uniform(1, 100)) for nom in noms]



class Portefeuille:
    '''Classe repr√©sentant un portefeuille d'actions. Il contient l'argent disponible et les actions poss√©d√©es.'''
    def __init__(self, argent_initial : float = 100) -> None:
        '''Initialise le portefeuille avec un montant d'argent initial et un dictionnaire d'actions.'''
        self.argent = argent_initial
        self.actions = {}  # nom_entreprise -> nombre d'actions poss√©d√©es

    def acheter(self, entreprise : object, quantite : int) -> bool:
        '''Ach√®te une certaine quantit√© d'actions d'une entreprise si l'argent disponible le permet.'''
        cout_total = entreprise.get_valeur() * quantite
        if cout_total <= self.argent:
            self.argent -= cout_total
            self.actions[entreprise.get_nom()] = self.actions.get(entreprise.get_nom(), 0) + quantite
            return True
        return False

    def vendre(self, entreprise : object, quantite : int) -> bool:
        '''Vend une certaine quantit√© d'actions d'une entreprise si le portefeuille en poss√®de suffisamment.'''
        if self.actions.get(entreprise.get_nom(), 0) >= quantite:
            self.actions[entreprise.get_nom()] -= quantite
            self.argent += entreprise.get_valeur() * quantite
            return True
        return False
    
    def get_resume(self) -> str:
        '''Retourne un r√©sum√© du portefeuille sous forme de cha√Æne de caract√®res.'''
        return f"Argent disponible: {self.argent:.2f}‚Ç¨\n" + "\n".join(
            [f"{nom}: {qte} actions" for nom, qte in self.actions.items() if qte > 0]
        )

    def supprimer_action(self):
        self.actions = {}
    
    def get_argent(self) -> float:
        '''Retourne le montant d'argent disponible dans le portefeuille.'''
        return self.argent

    def get_actions(self) -> dict:
        '''Retourne le dictionnaire des actions poss√©d√©es dans le portefeuille.'''
        return self.actions

    def modifier_argent(self, argent : float) -> None:
        '''Modifie le montant d'argent disponible dans le portefeuille.'''
        self.argent = argent
    
    def ajouter_argent(self, argent : float) -> None:
        self.argent += argent
    
    def modifier_actions(self, actions : dict) -> None:
        '''Modifie le dictionnaire des actions poss√©d√©es dans le portefeuille.'''
        self.actions = actions

infos_inutiles = [
    "Le PDG de Financo a √©t√© aper√ßu en train de danser sur son bureau.",
    "Les pigeons de la place boursi√®re pr√©voient un crash imminent.",
    "CryptoPotato annonce une nouvelle blockchain... pour les patates.",
    "FoodiCorp aurait rachet√© un fast-food pour l'exp√©rience immersive.",
    "TechNova offre d√©sormais des toasters connect√©s avec abonnement mensuel.",
    "Une taupe a √©t√© vue quittant les locaux de GameStart Inc.",
    "Le stagiaire de BioCorp aurait cliqu√© sur 'Vendre tout' par erreur.",
    "Le directeur de CleanPower roule en diesel. Chut.",
    "Un bug a fait monter la valeur de NullCompany √† ‚àû‚Ç¨.",
    "Le conseil d‚Äôadministration s‚Äôest perdu en salle de r√©union.",
    "On a retrouv√© un canard malin investissant dans les ETF.",
    "La machine √† caf√© de WallStreetCo refuse de servir avant 9h.",
    "La photocopieuse de TechSoft imprime uniquement des memes.",
    "Un chaton travaille d√©sormais comme analyste financier junior.",
    "Les sandwichs de la caf√©t√©ria sont cot√©s en bourse.",
    "Le cloud de DataSky gonfle plus vite qu‚Äôun ballon de baudruche.",
    "Le bureau 42 est officiellement class√© zone √† haut risque de crash.",
    "On dit que l‚Äôimprimante de DevCorp √©met des signaux de trading.",
    "Un ninja invisible a fait fondre le compte test de TradeSense.",
    "Le scooter flambant neuf du CEO est tax√© comme un actif crypto.",
    "Les plantes vertes de FinTechHouse g√©n√®rent 0,05% de rendement.",
    "Une l√©gende parle d‚Äôun glitch qui racheta toutes les actions Meta.",
    "Le grille-pain de SmartHomeCo br√ªle les toasts sur un trend ascendant.",
    "Les tableaux blancs de StrategyCorp s‚Äôauto-inscrivent en IPO.",
    "Le poney secret du d√©partement R&D fait grimper les valorisations.",
    "La porte du local data reste coinc√©e sur un signal haussier.",
    "Un drone livre d√©sormais les dividendes directement √† domicile.",
    "La fax antique de RetroTrade envoie des ordres √† 300 baud.",
    "On soup√ßonne un parc JurassicParkTokens de miner du Bitcoin.",
    "Le hamster du CEO s‚Äôest √©chapp√© avec des plans de diversification.",
    "Les tickets de m√©tro chez CityTransit Inc. affichent le Cours du jour.",
    "On a d√©couvert un tr√©sor de pi√®ces de monnaie dans l‚Äôarmoire du bureau.",
    "Le distributeur de snacks d√©clenche des alertes de volatilit√©.",
    "Le chat de l‚Äôadministrateur syst√®me a acc√®s √† tous les wallets.",
    "Les murs de la salle de r√©union sont recouverts de graphiques TikZ.",
    "L‚Äôhorloge du trading tourne √† l‚Äôheure du Lapin Blanc d‚ÄôAlice.",
    "Un ours en peluche porte un costume d‚Äôanalyste financier senior.",
    "Le code de la derni√®re mise √† jour est √©crit en hi√©roglyphes.",
    "Le stagiaire relit les contrats en format Comic Sans.",
    "La photocopieuse recrache des billets de Monopoly √† chaque copie.",
    "Le distributeur d‚Äôeau propose maintenant des jetons NFT.",
    "Un chat holographique fait office de speaker dans les conf√©rences.",
    "Le serveur principal tourne d√©sormais sous Windows 95, par nostalgie.",
    "La RSI de CupcakeCorp est mesur√©e en parts de g√¢teau.",
    "Le drone de surveillance joue du ukul√©l√© quand il patrouille.",
    "Un troll l√©gendaire commente chaque transaction via Slack.",
    "Le toboggan du bureau est d√©sormais la route d‚Äô√©vacuation d‚Äôurgence.",
    "Les employ√©s re√ßoivent des actions en formules de blagues.",
    "Le distributeur de caf√©s pr√©pare d√©sormais des CappuInvestments.",
]

def afficher_info_inutile(label):
    '''Affiche une information inutile al√©atoire sur l'interface graphique.'''
    # Choisir une information inutile al√©atoire
    message = f"{random.choice(infos_inutiles)}."
    # Afficher l'information sur le label
    label.config(text="üì¢ Flash Info : " + message)

import os
import sys

def resource_path(relative_path):
    """Obtenir le chemin absolu vers une ressource, m√™me si on est dans un .exe PyInstaller"""
    try:
        # PyInstaller cr√©e un dossier temporaire et y place les fichiers
        base_path = sys._MEIPASS
    except AttributeError:
        # En mode d√©veloppement
        base_path = os.path.abspath(".")

    return os.path.join(base_path, relative_path)
